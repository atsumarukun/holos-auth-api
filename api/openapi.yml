openapi: "3.0.3"

info:
  title: "holos: 認証認可 API"
  version: "1.0.0"

servers:
  - url: "http://auth-server:8000"
    description: "docker compose service"

paths:
  /users:
    post:
      summary: "ユーザー作成"
      tags:
        - "users"
      requestBody:
        $ref: "#/components/requestBodies/create_user"
      responses:
        201:
          description: "成功"
          $ref: "#/components/responses/create_user"
        500:
          description: "サーバーエラー"
          $ref: "#/components/responses/500"
    delete:
      summary: "ユーザー削除"
      tags:
        - "users"
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/delete_user"
      responses:
        204:
          description: "成功"
        401:
          description: "認証エラー"
          $ref: "#/components/responses/401"
        404:
          description: "存在しないリソース"
          $ref: "#/components/responses/404"
        500:
          description: "サーバーエラー"
          $ref: "#/components/responses/500"
  /users/name:
    put:
      summary: "ユーザー名更新"
      tags:
        - "users"
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/update_user_name"
      responses:
        200:
          description: "成功"
          $ref: "#/components/responses/update_user_name"
        401:
          description: "認証エラー"
          $ref: "#/components/responses/401"
        404:
          description: "存在しないリソース"
          $ref: "#/components/responses/404"
        500:
          description: "サーバーエラー"
          $ref: "#/components/responses/500"
  /users/password:
    put:
      summary: "ユーザーパスワード更新"
      tags:
        - "users"
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/update_user_password"
      responses:
        200:
          description: "成功"
          $ref: "#/components/responses/update_user_password"
        401:
          description: "認証エラー"
          $ref: "#/components/responses/401"
        404:
          description: "存在しないリソース"
          $ref: "#/components/responses/404"
        500:
          description: "サーバーエラー"
          $ref: "#/components/responses/500"
  /agents:
    get:
      summary: "エージェント一覧取得"
      tags:
        - "agents"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "成功"
          $ref: "#/components/responses/get_agents"
        401:
          description: "認証エラー"
          $ref: "#/components/responses/401"
        500:
          description: "サーバーエラー"
          $ref: "#/components/responses/500"
    post:
      summary: "エージェント作成"
      tags:
        - "agents"
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/create_agent"
      responses:
        201:
          description: "成功"
          $ref: "#/components/responses/create_agent"
        401:
          description: "認証エラー"
          $ref: "#/components/responses/401"
        500:
          description: "サーバーエラー"
          $ref: "#/components/responses/500"
  /agents/{id}:
    put:
      summary: "エージェント更新"
      tags:
        - "agents"
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
          description: "ID"
          example: "c99fc6e0-6e62-4de2-8a7e-5c608ceaa8c6"
      requestBody:
        $ref: "#/components/requestBodies/update_agent"
      responses:
        200:
          description: "成功"
          $ref: "#/components/responses/update_agent"
        401:
          description: "認証エラー"
          $ref: "#/components/responses/401"
        404:
          description: "存在しないリソース"
          $ref: "#/components/responses/404"
        500:
          description: "サーバーエラー"
          $ref: "#/components/responses/500"
    delete:
      summary: "エージェント削除"
      tags:
        - "agents"
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
          description: "ID"
          example: "c99fc6e0-6e62-4de2-8a7e-5c608ceaa8c6"
      responses:
        204:
          description: "成功"
        401:
          description: "認証エラー"
          $ref: "#/components/responses/401"
        404:
          description: "存在しないリソース"
          $ref: "#/components/responses/404"
        500:
          description: "サーバーエラー"
          $ref: "#/components/responses/500"
  /agents/{id}/policies:
    get:
      summary: "エージェントのポリシー一覧取得"
      tags:
        - "agents"
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
          description: "ID"
          example: "c99fc6e0-6e62-4de2-8a7e-5c608ceaa8c6"
      responses:
        200:
          description: "成功"
          $ref: "#/components/responses/get_agent_policies"
        401:
          description: "認証エラー"
          $ref: "#/components/responses/401"
        404:
          description: "存在しないリソース"
          $ref: "#/components/responses/404"
        500:
          description: "サーバーエラー"
          $ref: "#/components/responses/500"
    put:
      summary: "エージェントのポリシー更新"
      tags:
        - "agents"
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
          description: "ID"
          example: "c99fc6e0-6e62-4de2-8a7e-5c608ceaa8c6"
      requestBody:
        $ref: "#/components/requestBodies/update_agent_policies"
      responses:
        200:
          description: "成功"
          $ref: "#/components/responses/update_agent_policies"
        401:
          description: "認証エラー"
          $ref: "#/components/responses/401"
        404:
          description: "存在しないリソース"
          $ref: "#/components/responses/404"
        500:
          description: "サーバーエラー"
          $ref: "#/components/responses/500"
  /policies:
    get:
      summary: "ポリシー一覧取得"
      tags:
        - "policies"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "成功"
          $ref: "#/components/responses/get_policies"
        401:
          description: "認証エラー"
          $ref: "#/components/responses/401"
        500:
          description: "サーバーエラー"
          $ref: "#/components/responses/500"
    post:
      summary: "ポリシー作成"
      tags:
        - "policies"
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/create_policy"
      responses:
        201:
          description: "成功"
          $ref: "#/components/responses/create_policy"
        401:
          description: "認証エラー"
          $ref: "#/components/responses/401"
        500:
          description: "サーバーエラー"
          $ref: "#/components/responses/500"
  /policies/{id}:
    put:
      summary: "ポリシー更新"
      tags:
        - "policies"
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/update_policy"
      responses:
        200:
          description: "成功"
          $ref: "#/components/responses/update_policy"
        401:
          description: "認証エラー"
          $ref: "#/components/responses/401"
        404:
          description: "存在しないリソース"
          $ref: "#/components/responses/404"
        500:
          description: "サーバーエラー"
          $ref: "#/components/responses/500"
    delete:
      summary: "ポリシー削除"
      tags:
        - "policies"
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
          description: "ID"
          example: "c99fc6e0-6e62-4de2-8a7e-5c608ceaa8c6"
      responses:
        204:
          description: "成功"
        401:
          description: "認証エラー"
          $ref: "#/components/responses/401"
        404:
          description: "存在しないリソース"
          $ref: "#/components/responses/404"
        500:
          description: "サーバーエラー"
          $ref: "#/components/responses/500"
  /policies/{id}/agents:
    get:
      summary: "ポリシーのエージェント一覧取得"
      tags:
        - "policies"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "成功"
          $ref: "#/components/responses/get_policy_agents"
        401:
          description: "認証エラー"
          $ref: "#/components/responses/401"
        404:
          description: "存在しないリソース"
          $ref: "#/components/responses/404"
        500:
          description: "サーバーエラー"
          $ref: "#/components/responses/500"
    put:
      summary: "ポリシーのエージェント更新"
      tags:
        - "policies"
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/update_policy_agents"
      responses:
        200:
          description: "成功"
          $ref: "#/components/responses/update_policy_agents"
        401:
          description: "認証エラー"
          $ref: "#/components/responses/401"
        404:
          description: "存在しないリソース"
          $ref: "#/components/responses/404"
        500:
          description: "サーバーエラー"
          $ref: "#/components/responses/500"
  /auth/authorization:
    get:
      summary: "認可"
      tags:
        - "auth"
      security:
        - bearerAuth: []
      parameters:
        - in: "header"
          name: "Holos-Operator-Type"
          schema:
            type: "string"
          required: true
          description: "実行者"
          example: "USER"
      responses:
        200:
          description: "成功"
          $ref: "#/components/responses/auth_authorization"
        401:
          description: "認証エラー"
          $ref: "#/components/responses/401"
        403:
          description: "認可エラー"
          $ref: "#/components/responses/403"
        500:
          description: "サーバーエラー"
          $ref: "#/components/responses/500"
  /auth/signin:
    post:
      summary: "サインイン"
      tags:
        - "auth"
      requestBody:
        $ref: "#/components/requestBodies/auth_signin"
      responses:
        201:
          description: "成功"
          $ref: "#/components/responses/auth_signin"
        401:
          description: "認証エラー"
          $ref: "#/components/responses/401"
        500:
          description: "サーバーエラー"
          $ref: "#/components/responses/500"
  /auth/signout:
    delete:
      summary: "サインアウト"
      tags:
        - "auth"
      security:
        - bearerAuth: []
      responses:
        204:
          description: "成功"
        401:
          description: "認証エラー"
          $ref: "#/components/responses/401"
        500:
          description: "サーバーエラー"
          $ref: "#/components/responses/500"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: "アクセストークン"

  schemas:
    created_at:
      type: "string"
      description: "作成日"
      format: "date-time"
      example: "2017-07-21T17:32:28Z"
      readOnly: true
    updated_at:
      type: "string"
      description: "更新日"
      format: "date-time"
      example: "2017-07-21T17:32:28Z"
      readOnly: true
    user:
      type: "object"
      properties:
        id:
          type: "string"
          description: "ID"
          example: "c99fc6e0-6e62-4de2-8a7e-5c608ceaa8c6"
          readOnly: true
        name:
          type: "string"
          description: "ユーザー名"
          example: "user_name"
        password:
          type: "string"
          description: "パスワード"
          example: "password"
          writeOnly: true
        confirm_password:
          type: "string"
          description: "確認用パスワード"
          example: "password"
          writeOnly: true
        created_at:
          $ref: "#/components/schemas/created_at"
        updated_at:
          $ref: "#/components/schemas/updated_at"
      required:
        - "id"
        - "name"
        - "password"
        - "confirm_password"
        - "created_at"
        - "updated_at"
    agent:
      type: "object"
      properties:
        id:
          type: "string"
          description: "ID"
          example: "c99fc6e0-6e62-4de2-8a7e-5c608ceaa8c6"
          readOnly: true
        name:
          type: "string"
          description: "エージェント名"
          example: "agent_name"
        created_at:
          $ref: "#/components/schemas/created_at"
        updated_at:
          $ref: "#/components/schemas/updated_at"
      required:
        - "id"
        - "name"
        - "created_at"
        - "updated_at"
    policy:
      type: "object"
      properties:
        id:
          type: "string"
          description: "ID"
          example: "c99fc6e0-6e62-4de2-8a7e-5c608ceaa8c6"
          readOnly: true
        name:
          type: "string"
          description: "ポリシー名"
          example: "policy_name"
        effect:
          type: "string"
          description: "効果"
          example: "ALLOW"
        service:
          type: "string"
          description: "サービス"
          example: "STORAGE"
        path:
          type: "string"
          description: "パス"
          example: "/files/:id"
        methods:
          type: "array"
          description: "メソッド"
          items:
            type: "string"
          example:
            - "GET"
            - "POST"
            - "PUT"
        created_at:
          $ref: "#/components/schemas/created_at"
        updated_at:
          $ref: "#/components/schemas/updated_at"
      required:
        - "id"
        - "name"
        - "effect"
        - "service"
        - "path"
        - "method"
        - "created_at"
        - "updated_at"

  requestBodies:
    create_user:
      description: "ユーザー作成"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/user"
    update_user_name:
      description: "ユーザー名更新"
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/user"
              - type: "object"
                properties:
                  password:
                    readOnly: true
                  confirm_password:
                    readOnly: true
    update_user_password:
      description: "ユーザーパスワード更新"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              current_password:
                type: "string"
                description: "現在のパスワード"
                example: "current_password"
              new_password:
                type: "string"
                description: "新規パスワード"
                example: "new_password"
              confirm_new_password:
                type: "string"
                description: "確認用新規パスワード"
                example: "new_password"
    delete_user:
      description: "ユーザー削除"
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/user"
              - type: "object"
                properties:
                  name:
                    readOnly: true
                  confirm_password:
                    readOnly: true
    create_agent:
      description: "エージェント作成"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/agent"
    update_agent:
      description: "エージェント更新"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/agent"
    update_agent_policies:
      description: "エージェントのポリシー更新"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              policy_ids:
                type: "array"
                items:
                  $ref: "#/components/schemas/policy/properties/id"
    create_policy:
      description: "ポリシー作成"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/policy"
    update_policy:
      description: "ポリシー更新"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/policy"
    update_policy_agents:
      description: "ポリシーのエージェント更新"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              agent_ids:
                type: "array"
                items:
                  $ref: "#/components/schemas/agent/properties/id"
    auth_signin:
      description: "サインイン"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              user_name:
                $ref: "#/components/schemas/user/properties/name"
              password:
                $ref: "#/components/schemas/user/properties/password"

  responses:
    create_user:
      description: "ユーザー作成"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/user"
              - type: "object"
                properties:
                  id:
                    writeOnly: true
    update_user_name:
      description: "ユーザー名更新"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/user"
              - type: "object"
                properties:
                  id:
                    writeOnly: true
    update_user_password:
      description: "ユーザーパスワード更新"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/user"
              - type: "object"
                properties:
                  id:
                    writeOnly: true
    get_agents:
      description: "エージェント一覧取得"
      content:
        application/json:
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/agent"
    create_agent:
      description: "エージェント作成"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/agent"
    update_agent:
      description: "エージェント更新"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/agent"
    get_agent_policies:
      description: "エージェントのポリシー一覧取得"
      content:
        application/json:
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/policy"
    update_agent_policies:
      description: "エージェントのポリシー更新"
      content:
        application/json:
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/policy"
    get_policies:
      description: "ポリシー一覧取得"
      content:
        application/json:
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/policy"
    create_policy:
      description: "ポリシー作成"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/policy"
    update_policy:
      description: "ポリシー更新"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/policy"
    get_policy_agents:
      description: "ポリシーのエージェント一覧取得"
      content:
        application/json:
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/agent"
    update_policy_agents:
      description: "ポリシーのエージェント更新"
      content:
        application/json:
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/agent"
    auth_authorization:
      description: "認可"
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/user/properties/id"
    auth_signin:
      description: "サインイン"
      content:
        text/plain:
          schema:
            type: "string"
            description: "トークン"
            example: "GyTPPWGLe32H_2lZuoM7x0AV8OS_Yvit"
    401:
      description: "Unauthorized"
      content:
        text/plain:
          schema:
            type: "string"
            example: "unauthorized"
    403:
      description: "Forbidden"
      content:
        text/plain:
          schema:
            type: "string"
            example: "forbidden"
    404:
      description: "Resource Not Found"
      content:
        text/plain:
          schema:
            type: "string"
            example: "resource not found"
    500:
      description: "Internal Server Error"
      content:
        text/plain:
          schema:
            type: "string"
            example: "internal server error"
