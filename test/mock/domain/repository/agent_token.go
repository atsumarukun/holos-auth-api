// Code generated by MockGen. DO NOT EDIT.
// Source: agent_token.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	entity "holos-auth-api/internal/app/api/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAgentTokenRepository is a mock of AgentTokenRepository interface.
type MockAgentTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAgentTokenRepositoryMockRecorder
}

// MockAgentTokenRepositoryMockRecorder is the mock recorder for MockAgentTokenRepository.
type MockAgentTokenRepositoryMockRecorder struct {
	mock *MockAgentTokenRepository
}

// NewMockAgentTokenRepository creates a new mock instance.
func NewMockAgentTokenRepository(ctrl *gomock.Controller) *MockAgentTokenRepository {
	mock := &MockAgentTokenRepository{ctrl: ctrl}
	mock.recorder = &MockAgentTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentTokenRepository) EXPECT() *MockAgentTokenRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAgentTokenRepository) Delete(arg0 context.Context, arg1 *entity.AgentToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAgentTokenRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAgentTokenRepository)(nil).Delete), arg0, arg1)
}

// FindOneByAgentIDAndUserID mocks base method.
func (m *MockAgentTokenRepository) FindOneByAgentIDAndUserID(arg0 context.Context, arg1, arg2 uuid.UUID) (*entity.AgentToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByAgentIDAndUserID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.AgentToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByAgentIDAndUserID indicates an expected call of FindOneByAgentIDAndUserID.
func (mr *MockAgentTokenRepositoryMockRecorder) FindOneByAgentIDAndUserID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByAgentIDAndUserID", reflect.TypeOf((*MockAgentTokenRepository)(nil).FindOneByAgentIDAndUserID), arg0, arg1, arg2)
}

// Save mocks base method.
func (m *MockAgentTokenRepository) Save(arg0 context.Context, arg1 *entity.AgentToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAgentTokenRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAgentTokenRepository)(nil).Save), arg0, arg1)
}
