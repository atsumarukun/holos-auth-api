// Code generated by MockGen. DO NOT EDIT.
// Source: policy.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	entity "holos-auth-api/internal/app/api/domain/entity"
	apierr "holos-auth-api/internal/app/api/pkg/apierr"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockPolicyRepository is a mock of PolicyRepository interface.
type MockPolicyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyRepositoryMockRecorder
}

// MockPolicyRepositoryMockRecorder is the mock recorder for MockPolicyRepository.
type MockPolicyRepositoryMockRecorder struct {
	mock *MockPolicyRepository
}

// NewMockPolicyRepository creates a new mock instance.
func NewMockPolicyRepository(ctrl *gomock.Controller) *MockPolicyRepository {
	mock := &MockPolicyRepository{ctrl: ctrl}
	mock.recorder = &MockPolicyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyRepository) EXPECT() *MockPolicyRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPolicyRepository) Create(arg0 context.Context, arg1 *entity.Policy) apierr.ApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(apierr.ApiError)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPolicyRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPolicyRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockPolicyRepository) Delete(arg0 context.Context, arg1 *entity.Policy) apierr.ApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(apierr.ApiError)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPolicyRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPolicyRepository)(nil).Delete), arg0, arg1)
}

// FindByUserIDAndNotDeleted mocks base method.
func (m *MockPolicyRepository) FindByUserIDAndNotDeleted(arg0 context.Context, arg1 uuid.UUID) ([]*entity.Policy, apierr.ApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIDAndNotDeleted", arg0, arg1)
	ret0, _ := ret[0].([]*entity.Policy)
	ret1, _ := ret[1].(apierr.ApiError)
	return ret0, ret1
}

// FindByUserIDAndNotDeleted indicates an expected call of FindByUserIDAndNotDeleted.
func (mr *MockPolicyRepositoryMockRecorder) FindByUserIDAndNotDeleted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIDAndNotDeleted", reflect.TypeOf((*MockPolicyRepository)(nil).FindByUserIDAndNotDeleted), arg0, arg1)
}

// FindOneByIDAndUserIDAndNotDeleted mocks base method.
func (m *MockPolicyRepository) FindOneByIDAndUserIDAndNotDeleted(arg0 context.Context, arg1, arg2 uuid.UUID) (*entity.Policy, apierr.ApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByIDAndUserIDAndNotDeleted", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.Policy)
	ret1, _ := ret[1].(apierr.ApiError)
	return ret0, ret1
}

// FindOneByIDAndUserIDAndNotDeleted indicates an expected call of FindOneByIDAndUserIDAndNotDeleted.
func (mr *MockPolicyRepositoryMockRecorder) FindOneByIDAndUserIDAndNotDeleted(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByIDAndUserIDAndNotDeleted", reflect.TypeOf((*MockPolicyRepository)(nil).FindOneByIDAndUserIDAndNotDeleted), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockPolicyRepository) Update(arg0 context.Context, arg1 *entity.Policy) apierr.ApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(apierr.ApiError)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPolicyRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPolicyRepository)(nil).Update), arg0, arg1)
}
